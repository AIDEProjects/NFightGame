buildscript {
	repositories {
		mavenCentral()
		google()
	}
}
apply plugin: 'com.android.application'


android {
	namespace "com.goldsprite.nfightgame.android"
	compileSdk 30 //旧版android兼容
	sourceSets {
		main {
			manifest.srcFile 'src/main/AndroidManifest.xml' //旧版android兼容
			java.srcDirs = ['src/main/java']
			aidl.srcDirs = ['src/main/aidl']
			renderscript.srcDirs = ['src/main/renderscript']
			res.srcDirs = ['src/main/res'] //旧版android兼容
			assets.srcDirs = ['../assets'] //--aide兼容-- 已更新到根目录位置
			jniLibs.srcDirs = ['src/main/JNIlibs'] //aide兼容
		}
	}
	packagingOptions {
		resources {
			excludes += ['META-INF/robovm/ios/robovm.xml', 'META-INF/DEPENDENCIES.txt', 'META-INF/DEPENDENCIES',
									 'META-INF/dependencies.txt', '**/*.gwt.xml']
			pickFirsts += ['META-INF/LICENSE.txt', 'META-INF/LICENSE', 'META-INF/license.txt', 'META-INF/LGPL2.1',
										 'META-INF/NOTICE.txt', 'META-INF/NOTICE', 'META-INF/notice.txt']
		}
	}
	defaultConfig {
		applicationId 'com.goldsprite.nfightgame.android'
		minSdkVersion 24
		targetSdkVersion 34
		versionCode 1
		versionName "1.0"
		multiDexEnabled true
	}
	compileOptions {
		sourceCompatibility "8"
		targetCompatibility "8"
		coreLibraryDesugaringEnabled true
	}
	buildTypes {
		release {
			minifyEnabled false //取消混淆以提高编译速度
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
	}
	lintOptions {
		// 禁用 lint 检查
		abortOnError false // 不会因为 lint 错误而中止构建
		disable 'All' // 禁用所有 lint 检查
		checkReleaseBuilds false // 不进行发布版本的 lint 检查
	}
}

repositories {
	// needed for AAPT2, may be needed for other tools
	google()
}

configurations { natives }

dependencies {
	coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'

	implementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
	implementation project(':examples')

	natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
	natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
	natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
	natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"

	natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi-v7a"
	natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-arm64-v8a"
	natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86"
	natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86_64"

}

tasks.withType(JavaCompile) {
	// 用于android的java构建版本过时警告
	options.compilerArgs << "-Xlint:-options"
}
// Called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
tasks.register('copyAndroidNatives') {
	doFirst {
		file("src/main/JNILibs/armeabi-v7a/").mkdirs()
		file("src/main/JNILibs/arm64-v8a/").mkdirs()
		file("src/main/JNILibs/x86_64/").mkdirs()
		file("src/main/JNILibs/x86/").mkdirs()

		configurations.natives.copy().files.each { jar ->
			def outputDir = null
			if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("src/main/JNILibs/armeabi-v7a")
			if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("src/main/JNILibs/arm64-v8a")
			if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("src/main/JNILibs/x86_64")
			if (jar.name.endsWith("natives-x86.jar")) outputDir = file("src/main/JNILibs/x86")
			if (outputDir != null) {
				copy {
					from zipTree(jar)
					into outputDir
					include "*.so"
				}
			}
		}
	}
}

tasks.matching { it.name.contains("merge") && it.name.contains("JniLibFolders") }.configureEach { packageTask ->
	packageTask.dependsOn 'copyAndroidNatives'
}

tasks.register('run', Exec) {
	def path
	def localProperties = project.file("../local.properties")
	if (localProperties.exists()) {
		Properties properties = new Properties()
		localProperties.withInputStream { instr ->
			properties.load(instr)
		}
		def sdkDir = properties.getProperty('sdk.dir')
		if (sdkDir) {
			path = sdkDir
		} else {
			path = "$System.env.ANDROID_SDK_ROOT"
		}
	} else {
		path = "$System.env.ANDROID_SDK_ROOT"
	}

	def adb = path + "/platform-tools/adb"
	commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.goldsprite.nfightgame/com.goldsprite.nfightgame.android.AndroidLauncher'
}

eclipse.project.name = appName + "-android"
